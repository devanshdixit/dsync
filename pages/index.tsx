import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";
import { HiArrowRight } from "react-icons/hi";
import Footer from "../components/Footer";
import Header from "../components/Header";
import ProjectCard from "../components/ProjectCard";
import Search from "../components/Search/index";
import TaskCard from "../components/TaskCard";
import { appConfig } from "../config/appConfig";
import clientPromise from "../config/mongodb";
import { motion } from "framer-motion";
import {
  card,
  cards,
  topFadeIn,
} from "../components/Animations/View-all/index";
import AnimateWrapper from "../components/Animations/Wrappers/AnimateWrapper";
import CardsParentWrapper from "../components/Animations/Wrappers/CardsWrapper";
import { getAllProject, getAllTasks } from "../utils/queries";
import { makeHasuraAdminRequest } from "../config/fetch-requests";
import { Item } from "aws-sdk/clients/connectparticipant";
export default function IndexPage(props: any) {
  const projects = props?.project || [];
  const tasks = props?.task || [];
  const searchProjects = props?.searchProjectdata || [];
  const searchTasks = props?.searchTaskdata || [];
  console.log(props);

  const categories = [
    "Design",
    "Python",
    "HTML",
    "CSS",
    "Figma",
    "Graphic design",
    "Solidity",
    "Content writing",
    "Video editing",
    "React.js",
    "Vue.js",
  ];
  const [details, setDetails] = useState(false);
  const [active, setActive] = useState("");
  const [currentTab, setCurrentTab] = useState("trending");

  return (
    <>
      <Head>
        <title>{appConfig.appName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href={appConfig.logo} />
      </Head>
      <Header />
      <AnimateWrapper>
        <div className="flex mx-[120px] mt-6 justify-center">
          {/* left side bar mobile view */}
          <div className="flex lg:hidden lg:flex-row gap-4 flex-col">
            {/* mobile view tab */}
            <div className="mt-4 text-white justify-center w-full flex lg:hidden">
              <div
                className={`hover:bg-[#242426] w-[50%] text-center cursor-pointer text-[14px] border-b-[1px]  px-4 py-3 ${
                  currentTab === "trending"
                    ? "border-[#A9FF1C]"
                    : "border-[#858585]"
                }`}
                onClick={() => setCurrentTab("trending")}
              >
                Trending Projects
              </div>
              <div
                className={`hover:bg-[#242426] w-[50%] text-center cursor-pointer text-[16px] border-b-[1px]  px-4 py-3 ${
                  currentTab === "recent"
                    ? "border-[#A9FF1C]"
                    : "border-[#858585]"
                }`}
                onClick={() => setCurrentTab("recent")}
              >
                Recent Task
              </div>
            </div>
            {currentTab === "trending" ? (
              <>
                {/* trending projects */}
                <div className="md:mx-4 md:max-w-[619px]">
                  <Search
                    projects={searchProjects}
                    tasks={searchTasks}
                    className=" mb-6 w-[95vw] md:w-[100%]  h-[40px] bg-[#0C0C0E] border-[1px] border-[#3D3D3D]   pl-[46px] placeholder:font-[400] text-[16px] font-sans  text-white"
                  />
                  <div className="text-[16px] font-[400] text-white mb-4">
                    Categories
                  </div>
                  {/* Categories  list*/}
                  <CardsParentWrapper>
                    <div className="flex gap-2 overflow-scroll md:w-[619px] scrollCatogries w-[95vw] ">
                      {categories &&
                        categories.map((items, i) => (
                          <motion.div
                            variants={card}
                            key={i}
                            className={` text-white min-w-fit py-2 px-4  ${
                              active == items
                                ? "bg-[#a9ff1c] text-black hover:bg-[#a9ff1c]  border-[1px] border-[#a9ff1c] "
                                : "border-[1px] border-[#3D3D3D] hover:bg-[#242426] "
                            }`}
                            onClick={() => setActive(items)}
                          >
                            {items}
                          </motion.div>
                        ))}
                    </div>
                  </CardsParentWrapper>
                  <div className="text-white text-[16px] font-[400] mb-4 mt-[24px]">
                    Trending Projects
                  </div>
                  {/* Projects list */}
                  <CardsParentWrapper>
                    <div className="h-[80vh] overflow-scroll projectScroll w-[95vw] md:w-auto ">
                      <ProjectCard project={projects.slice(-10).reverse()} />
                    </div>
                  </CardsParentWrapper>
                </div>
              </>
            ) : (
              <>
                {/* recent tasks */}
                <div className="flex flex-col justify-center items-center">
                  <div className="mb-6 text-white flex justify-between w-[95vw]">
                    <div className="text-[16px] font-[600]">Recent Task</div>
                    <Link
                      href={"/view-all"}
                      className="underline font-[600] text-[12px]"
                    >
                      View All
                    </Link>
                  </div>
                  <div className="md:w-[307px] flex flex-col  gap-2 mb-20 md:mb-0 md:h-[80vh] md:overflow-scroll projectScroll ">
                    <TaskCard tasks={tasks.slice(-10).reverse()} />
                  </div>
                </div>
              </>
            )}
          </div>
          {/* left side bar desktop view */}
          <div className="hidden lg:flex lg:flex-row gap-4 flex-col">
            {/* recent tasks */}
            <div>
              <motion.div
                variants={topFadeIn}
                initial="hidden"
                animate="show"
                exit="hide"
                className="mb-6 text-white flex justify-between"
              >
                <div className="text-[16px] font-[600]">Recent Task</div>
                <Link
                  href={"/view-all"}
                  className="underline font-[600] text-[12px]"
                >
                  View All
                </Link>
              </motion.div>
              <CardsParentWrapper>
                <div className="md:w-[307px] flex flex-row md:flex-col  gap-2 mb-20 md:mb-0 md:h-[80vh] overflow-scroll projectScroll w-[95vw] ">
                  <TaskCard tasks={tasks?.slice(-10).reverse()} />
                </div>
              </CardsParentWrapper>
            </div>
            {/* trending projects */}
            <div className="md:mx-4 md:max-w-[619px]">
              <Search
                projects={searchProjects}
                tasks={searchTasks}
                className=" mb-6 md:w-[619px] w-[95vw] h-[40px] bg-[#0C0C0E] border-[1px] border-[#3D3D3D]   pl-[46px] placeholder:font-[400] text-[16px] font-sans  text-white"
              />
              <div className="text-[16px] font-[400] text-white mb-4">
                Categories
              </div>
              {/* Categories  list*/}
              <CardsParentWrapper>
                <div className="flex gap-2 overflow-scroll md:w-[619px] scrollCatogries w-[95vw] ">
                  {categories &&
                    categories.map((items, i) => (
                      <motion.div
                        variants={card}
                        key={i}
                        className={` text-white min-w-fit py-2 px-4  ${
                          active == items
                            ? "bg-[#a9ff1c] text-black hover:bg-[#a9ff1c]  border-[1px] border-[#a9ff1c] "
                            : "border-[1px] border-[#3D3D3D] hover:bg-[#242426] "
                        }`}
                        onClick={() => setActive(items)}
                      >
                        {items}
                      </motion.div>
                    ))}
                </div>
              </CardsParentWrapper>
              <div className="text-white text-[16px] font-[400] mb-4 mt-[24px]">
                Trending Projects
              </div>
              {/* Projects list */}
              <CardsParentWrapper>
                <div className="h-[80vh] overflow-scroll projectScroll w-[95vw] md:w-auto ">
                  <ProjectCard project={projects.slice(-10).reverse()} />
                </div>
              </CardsParentWrapper>
            </div>
          </div>
          {/* right sidebar also blog section */}
          <CardsParentWrapper>
            <div className=" flex-col gap-2 hidden xl:flex">
              <motion.div
                variants={card}
                className="gradient w-[306px] h-[197px]  flex flex-col justify-end items-start px-4 py-1 relative text-[#858585] hover:text-white transition-colors"
                onMouseEnter={() => setDetails(true)}
                onMouseLeave={() => setDetails(false)}
              >
                <Image
                  className="absolute right-0 top-0"
                  src={"/images/asyncblog.png"}
                  height={112}
                  width={238}
                  alt="blog"
                />
                <div className="text-[16px] mb-2 font-[600] ">
                  <div className="max-w-max">How to Create Task</div>
                  <HiArrowRight
                    className={`absolute right-5 bottom-12 h-7 w-7  ${
                      details ? "pop" : "hidden"
                    } `}
                  />
                </div>
                <div className="text-[12px] font-[400] w-[213px]">
                  Lorem Ipsum is simply dummy text of the printing and
                  typesetting industry.
                </div>
              </motion.div>
              <motion.div
                variants={card}
                initial="hidden"
                animate="show"
                exit="hide"
                className=" w-[306px] h-[197px] relative flex flex-col justify-end items-start px-4 py-1"
              >
                <Image
                  className="absolute right-0 top-0 z=-"
                  src={"/images/discordblog.png"}
                  height={197}
                  width={306}
                  alt="blog"
                />
                <div className="text-[16px] mb-2 font-[600] text-white z-10">
                  Join Discord
                </div>
                <div className="text-[12px] font-[400] text-[#858585] w-[213px] z-10">
                  Connect with other Async contributors
                </div>
              </motion.div>
            </div>
          </CardsParentWrapper>
        </div>
      </AnimateWrapper>
      <Footer />
    </>
  );
}
export async function getServerSideProps() {
  try {
    const projectdata = await makeHasuraAdminRequest(getAllProject);
    console.log(projectdata);
    
    const taskdata = await makeHasuraAdminRequest(getAllTasks);
    console.log(taskdata);

    const searchProjectdata = projectdata?.data?.asyncnewui_project.map(
      (item: any) => {
        return {
          name: item.name,
          type: "Project",
          url: `/project/${item?.id}`,
          logo: item.logo,
        };
      }
    );
    const searchTaskdata = taskdata?.data?.asyncnewui_task.map((item: any) => {
      return {
        name: item.title,
        type: "Task",
        url: `/task/${item?.id}?project=${item?.projectId}`,
        logo: item.logo,
      };
    });
    const data = {
      project: projectdata.data.asyncnewui_project,
      task: taskdata.data.asyncnewui_task,
      searchProjectdata: searchProjectdata,
      searchTaskdata: searchTaskdata,
    };

    return {
      props: JSON.parse(JSON.stringify(data)),
    };
  } catch (error) {
    console.log("index page", error);

    return {
      props: { message: "error" },
    };
  }
}
