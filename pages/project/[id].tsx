import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useContext, useEffect, useState } from "react";
import Footer from "../../components/Footer";
import GeneralChat from "../../components/GenralChat";
import Header from "../../components/Header";
import KanbanCardSection from "../../components/KanbanCardSection";
import { appConfig } from "../../config/appConfig";
import Share from "../../components/ShareButton";
import GoBack from "../../components/Goback";
import ProjectDetails from "../../components/ProjectDetails";
import { LoadingOutlined } from "@ant-design/icons";
import { getProjectById, getTaskCreatedBy } from "../../utils/queries";
import { UserContext } from "../../context/user.context";
import { useRouter } from "next/router";
import { IsError, Project } from "../../utils/types";
import Error from "../../components/Error";
import AnimateWrapper from "../../components/Animations/Wrappers/AnimateWrapper";
import { makeHasuraAdminRequest } from "../../config/fetch-requests";
import { useSelector } from "react-redux";

const Home: NextPage = (props: any) => {
  const projectData = props?.projectData;
  const taskCreatedbyData = props?.taskCreatedbyData;

  const [project, setProject] = useState<Project>({
    logo: "",
    name: "Project Title",
    createdBy: "",
    id: "",
    category: "",
    chats: [],
  });
  const user = useSelector((state: any) => state?.user?.id);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isManager, setIsManager] = useState(false);
  const [isError, setIsError] = useState<IsError>({
    isError: false,
    message: "",
  });

  const antIcon = (
    <LoadingOutlined style={{ fontSize: 20, color: "black" }} spin />
  );
  useEffect(() => {
    if (!user) {
      setIsLoading(false);
      setIsError({
        isError: true,
        message: `Unable to fetch  data! please loginâ†—`,
      });
      return;
    }
    if (user) {
      setIsLoading(false);
      setIsError({
        isError: false,
      });
      const data: any = {
        id: projectData?.id?.toString() || "",
        logo: projectData?.logo || "",
        category: projectData?.category || "",
        createdBy: projectData?.created_by || "",
        name: projectData?.name || "",
        chats: projectData?.chats || [],
        created_at: projectData?.created_at || [],
      };
      setProject(data);
      if (user.toString() === projectData?.created_by) {
        console.log("user is Manager");
        setIsManager(true);
      } else {
        console.log("user is not Manager");
      }
    }
  }, [user]);

  return (
    <>
      <Head>
        <title>{project.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href={appConfig.logo} />
      </Head>
      <Header />
      {isLoading ? (
        <>
          <Error error="Loading" type="status" />
        </>
      ) : (
        <>
          {isError.isError ? (
            <>
              <Error error={isError.message} type="error" />
            </>
          ) : (
            <AnimateWrapper>
              <main className="h-[100vh]  mt-[35px] md:mx-[110px]">
                <GoBack label="back to all tasks" divClassName="mb-3" />
                <div className="flex justify-between 2xl:justify-evenly items-center flex-row mx-4">
                  <div className="flex text-white  items-center flex-col md:flex-row  md:gap-[16px] text-[22px] font-[600] font-sans ">
                    <div className="flex gap-[16px]">
                      {project?.logo && project?.logo !== "" ? (
                        <Image
                          src={project?.logo}
                          height={32}
                          width={32}
                          alt={"logo"}
                        />
                      ) : (
                        <Image
                          src={`https://ui-avatars.com/api/?background=242426&color=fff&name=${project?.name.trim()}`}
                          height={32}
                          width={32}
                          alt={"logo"}
                        />
                      )}
                      <div>{project?.name}</div>
                    </div>
                    {/* <Search className="hidden lg:block w-[268px] h-[40px] bg-transparent border-[1px] border-[#3D3D3D] pl-[46px] placeholder:font-[400] text-[16px] font-sans text-white" /> */}
                  </div>

                  <div className="flex text-white  gap-4 items-center">
                    <ProjectDetails
                      project={project}
                      activity={taskCreatedbyData}
                    />

                    <Share
                      home={false}
                      category="project"
                      name={project.name}
                    />
                    {/* <Filter /> */}
                  </div>
                </div>
                <div className="overflow-scroll md:overflow-visible projectScroll  mt-4">
                  <div className="w-max md:w-auto flex gap-[8px] mb-[74px] md:mb-0 justify-center items-center  ml-[10px] md:mr-0 ">
                    {isManager && (<KanbanCardSection
                      title="All"
                      statusColor="#FFE81C"
                      projectDetails={project}
                      isManager={isManager}
                      query=""
                    />)}
                    {!isManager && (
                      <KanbanCardSection
                        title="Staked"
                        isManager={isManager}
                        statusColor="#FFE81C"
                        projectDetails={project}
                        query=""
                      />
                    )}
                    <KanbanCardSection
                      query=""
                      title="Live"
                      statusColor="#2B59FF"
                      projectDetails={project}
                    />
                    <KanbanCardSection
                      query=""
                      title="Done"
                      statusColor="#80ED5D"
                      projectDetails={project}
                    />
                    {/* {typeof window === undefined ? "" : <GeneralChat {...project} />} */}
                  </div>
                </div>
                <Footer />
              </main>
            </AnimateWrapper>
          )}
        </>
      )}
    </>
  );
};

export default Home;

export async function getServerSideProps(context: any) {
  const { id } = context.params;
  try {
    const resp = await makeHasuraAdminRequest(getProjectById, {
      variables: {
        projectId: parseInt(id),
      },
    });
    const taskresp = await makeHasuraAdminRequest(getTaskCreatedBy, {
      variables: {
        projectId: id,
      },
    });
    console.log(taskresp, resp);

    return {
      props: {
        projectData: JSON.parse(
          JSON.stringify(resp?.data?.asyncnewui_project[0])
        ),
        taskCreatedbyData: JSON.parse(
          JSON.stringify(taskresp?.data?.asyncnewui_task)
        ),
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: JSON.parse(
        JSON.stringify({ meesage: "error in fetching project" })
      ),
    };
  }
}
