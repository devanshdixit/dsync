import Head from "next/head";
import { useEffect, useState } from "react";
import InfiniteScroll from "react-infinite-scroll-component";
import GoBack from "../../components/Goback";
import Header from "../../components/Header";
import ProjectCard from "../../components/ProjectCard";
import Search from "../../components/Search";
import TaskCard from "../../components/TaskCard";
import { appConfig } from "../../config/appConfig";
import clientPromise from "../../config/mongodb";
import { useRouter } from "next/router";
import AnimateWrapper from "../../components/Animations/Wrappers/AnimateWrapper";
import CardsParentWrapper from "../../components/Animations/Wrappers/CardsWrapper";
import { makeHasuraAdminRequest } from "../../config/fetch-requests";
import { getAllProject, getAllTasks } from "../../utils/queries";

const ViewAll = (props: any) => {
  const route = useRouter();
  const [active, setActive] = useState("task");
  const projects = props?.project || [];
  const tasks = props?.task || [];
  const searchProjects = props?.searchProjectdata || [];
  const searchTasks = props?.searchTaskdata || [];
  const [isLoading, setIsLoading] = useState(false);
  // infinite scroll for Task tab
  const [taskData, setTaskData] = useState(tasks.slice(0, 12));
  const [taskSize, setTaskSize] = useState(12);

  // refetch task2
  const loadMoreTasks = () => {
    const nextTaskData = tasks.slice(taskSize, taskSize + 12);
    setTaskData([...taskData, ...nextTaskData]);
    setTaskSize(taskSize + 12);
  };

  // infinite scroll for Project tab
  const [projectData, setProjectData] = useState(projects.slice(0, 6));
  const [projectSize, setProjectSize] = useState(6);
  // refetch projects
  const loadMoreProjects = () => {
    const nextProjectData = projects.slice(projectSize, projectSize + 6);
    setProjectData([...projectData, ...nextProjectData]);
    setProjectSize(projectSize + 6);
  };
  return (
    <div>
      <Head>
        <title>{appConfig.appName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/logo.png" />
      </Head>
      <Header />
      <AnimateWrapper>
        <main className="mx-5 md:mx-10 lg:mx-20 xl:mx-[220px]">
          <div className="mt-6 w-[100%]">
            <GoBack />
            <div className="text-[24px] font-[700] font-satoshi text-white mt-6">
              All Tasks
            </div>
            <div className="mt-6 mb-6 ">
              <Search
                tasks={searchTasks}
                projects={searchProjects}
                className=" w-[95%] md:w-full h-[40px] bg-[#0C0C0E] border-[1px] border-[#3D3D3D] pl-[46px] placeholder:font-[400] text-[16px] font-sans text-white "
              />
            </div>
            <div className="text-white text-[16px] font-[600] mt-[67px] flex gap-5 ">
              <div
                onClick={() => setActive("project")}
                className={`cursor-pointer ${
                  active === "project"
                    ? "text-white underline underline-offset-1"
                    : "text-white text-opacity-40"
                }`}
              >
                Projects
              </div>
              <div
                onClick={() => setActive("task")}
                className={`cursor-pointer ${
                  active === "task"
                    ? "text-white underline underline-offset-1"
                    : "text-white text-opacity-40"
                }`}
              >
                Tasks
              </div>
            </div>
            {active === "project" && (
              <InfiniteScroll
                dataLength={projectSize}
                next={loadMoreProjects}
                hasMore={true}
                loader={
                  isLoading && (
                    <h1 className="text-white text-center">Loading...</h1>
                  )
                }
              >
                <CardsParentWrapper>
                  <div className="overflow-hidden w-[95vw] md:w-auto mt-8">
                    <ProjectCard project={projectData} />
                  </div>
                </CardsParentWrapper>
              </InfiniteScroll>
            )}
            {active === "task" && (
              <InfiniteScroll
                dataLength={taskSize}
                next={loadMoreTasks}
                hasMore={true}
                loader={
                  isLoading && (
                    <h1 className="text-white text-center">Loading...</h1>
                  )
                }
              >
                <CardsParentWrapper>
                  <div className="flex overflow-hidden flex-wrap gap-2 mt-8">
                    <TaskCard tasks={taskData} />
                  </div>
                </CardsParentWrapper>
              </InfiniteScroll>
            )}
          </div>
        </main>
      </AnimateWrapper>
    </div>
  );
};

export default ViewAll;

export async function getServerSideProps() {
  try {
    const projectdata = await makeHasuraAdminRequest(getAllProject);
    const taskdata = await makeHasuraAdminRequest(getAllTasks);
    console.log("jello", taskdata?.data?.task);

    const searchProjectdata = projectdata?.data?.asyncnewui_project.map(
      (item: any) => {
        return {
          name: item.name,
          type: "Project",
          url: `/project/${item?.id}`,
          logo: item.logo,
        };
      }
    );
    const searchTaskdata = taskdata?.data?.asyncnewui_task.map((item: any) => {
      return {
        name: item.title,
        type: "Task",
        url: `/task/${item?.id}?project=${item?.projectId}`,
        logo: item.logo,
      };
    });
    const data = {
      project: projectdata.data.asyncnewui_project,
      task: taskdata.data.asyncnewui_task,
      searchProjectdata: searchProjectdata,
      searchTaskdata: searchTaskdata,
    };

    console.log(data);

    return {
      props: JSON.parse(JSON.stringify(data)),
    };
  } catch (error) {
    console.log("index page", error);

    return {
      props: { message: "error" },
    };
  }
}
